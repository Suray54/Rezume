{"version":3,"sources":["layouts/navbar/navbar.components.jsx","components/section-one/section-one.component.jsx","pages/homepage/homepage.components.jsx","App.js","serviceWorker.js","index.js"],"names":["navbar","className","id","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","class","aria-hidden","href","Component","SectionOne","Homepage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAGqBA,G,mLAEjB,OACE,6BACE,yBAAKC,UAAU,qCAAqCC,GAAG,aACrD,yBAAKD,UAAU,aACb,4BACEA,UAAU,iBACVE,KAAK,SACLC,cAAY,WACZC,cAAY,oBACZC,gBAAc,mBACdC,gBAAc,QACdC,aAAW,qBAEX,uBAAGC,MAAM,aAAaC,cAAY,UAGpC,yBACET,UAAU,qDACVC,GAAG,oBAEH,wBAAID,UAAU,cACZ,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWU,KAAK,iBAA7B,SAIF,wBAAIV,UAAU,YACZ,uBAAGA,UAAU,WAAWU,KAAK,sBAA7B,cAIF,wBAAIV,UAAU,YACZ,uBAAGA,UAAU,WAAWU,KAAK,mBAA7B,WAIF,wBAAIV,UAAU,YACZ,uBAAGA,UAAU,WAAWU,KAAK,kBAA7B,UAIF,wBAAIV,UAAU,YACZ,uBAAGA,UAAU,WAAWU,KAAK,oBAA7B,qB,GA5CkBC,c,MCCrB,SAASC,IACtB,OACE,6BAASZ,UAAU,WAAWC,GAAG,gBAC/B,yBAAKO,MAAM,WACT,0CACa,+CAEb,uD,ICJaK,E,uKAEjB,OACE,6BACE,kBAAC,EAAD,MACA,kBAACD,EAAD,W,GAL8BD,aCJjBG,E,uKAEjB,OACE,6BACE,kBAAC,EAAD,W,GAJyBH,aCSbI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e4f8d42f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./navbar.styles.scss\";\r\n\r\nexport default class navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-lg fixed-top \" id=\"pb-navbar\">\r\n          <div className=\"container\">\r\n            <button\r\n              className=\"navbar-toggler\"\r\n              type=\"button\"\r\n              data-toggle=\"collapse\"\r\n              data-target=\"#navbarsExample09\"\r\n              aria-controls=\"navbarsExample09\"\r\n              aria-expanded=\"false\"\r\n              aria-label=\"Toggle navigation\"\r\n            >\r\n              <i class=\"fa fa-bars\" aria-hidden=\"true\"></i>\r\n            </button>\r\n\r\n            <div\r\n              className=\"collapse navbar-collapse justify-content-md-center\"\r\n              id=\"navbarsExample09\"\r\n            >\r\n              <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" href=\"#section-home\">\r\n                    Home\r\n                  </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" href=\"#section-portfolio\">\r\n                    Portfolio\r\n                  </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" href=\"#section-resume\">\r\n                    Resume\r\n                  </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" href=\"#section-about\">\r\n                    About\r\n                  </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" href=\"#section-contact\">\r\n                    Contact\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./section-one.styles.scss\";\r\n\r\nexport default function SectionOne() {\r\n  return (\r\n    <section className=\"section1\" id=\"section-home\">\r\n      <div class=\"details\">\r\n        <h1>\r\n          Hello, I'm <span>Suranjan Rai</span>\r\n        </h1>\r\n        <h3>and this is my resume</h3>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./homepage.styles.scss\";\r\n\r\nimport Navbar from \"../../layouts/navbar/navbar.components\";\r\n\r\nimport SectionOne from \"../../components/section-one/section-one.component\";\r\n\r\nexport default class Homepage extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar />\r\n        <SectionOne />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport Homepage from \"./pages/homepage/homepage.components\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Homepage />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}